"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getShareExtensionViewControllerContent = exports.getShareExtensionViewControllerPath = exports.getShareExtensionStoryBoardContent = exports.getShareExtensionStoryboardFilePath = exports.getPrivacyInfoContent = exports.getPrivacyInfoFilePath = exports.getShareExtensionInfoContent = exports.getShareExtensionInfoFilePath = exports.getShareExtensionEntitlementsContent = exports.getShareExtensionEntitlements = exports.getShareExtensionEntitlementsFilePath = exports.writeShareExtensionFiles = void 0;
const plist_1 = __importDefault(require("@expo/plist"));
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const constants_1 = require("./constants");
async function writeShareExtensionFiles(platformProjectRoot, scheme, appIdentifier, parameters, appName) {
    // ShareExtension-Info.plist
    const infoPlistFilePath = getShareExtensionInfoFilePath(platformProjectRoot);
    const infoPlistContent = getShareExtensionInfoContent(parameters.iosActivationRules, appName);
    await node_fs_1.default.promises.mkdir(node_path_1.default.dirname(infoPlistFilePath), { recursive: true });
    await node_fs_1.default.promises.writeFile(infoPlistFilePath, infoPlistContent);
    // ShareExtension.entitlements
    const entitlementsFilePath = getShareExtensionEntitlementsFilePath(platformProjectRoot);
    const entitlementsContent = getShareExtensionEntitlementsContent(appIdentifier);
    await node_fs_1.default.promises.writeFile(entitlementsFilePath, entitlementsContent);
    // PrivacyInfo.xcprivacy
    const pricayFilePath = getPrivacyInfoFilePath(platformProjectRoot);
    const pricayContent = getPrivacyInfoContent();
    await node_fs_1.default.promises.writeFile(pricayFilePath, pricayContent);
    // MainInterface.storyboard
    const storyboardFilePath = getShareExtensionStoryboardFilePath(platformProjectRoot);
    const storyboardContent = getShareExtensionStoryBoardContent();
    await node_fs_1.default.promises.writeFile(storyboardFilePath, storyboardContent);
    // ShareViewController.swift
    const viewControllerFilePath = getShareExtensionViewControllerPath(platformProjectRoot);
    const viewControllerContent = getShareExtensionViewControllerContent(scheme, appIdentifier);
    await node_fs_1.default.promises.writeFile(viewControllerFilePath, viewControllerContent);
}
exports.writeShareExtensionFiles = writeShareExtensionFiles;
//: [root]/ios/ShareExtension/ShareExtension.entitlements
function getShareExtensionEntitlementsFilePath(platformProjectRoot) {
    return node_path_1.default.join(platformProjectRoot, constants_1.shareExtensionName, constants_1.shareExtensionEntitlementsFileName);
}
exports.getShareExtensionEntitlementsFilePath = getShareExtensionEntitlementsFilePath;
function getShareExtensionEntitlements(appIdentifier) {
    return {
        "com.apple.security.application-groups": (0, constants_1.getAppGroups)(appIdentifier),
    };
}
exports.getShareExtensionEntitlements = getShareExtensionEntitlements;
function getShareExtensionEntitlementsContent(appIdentifier) {
    return plist_1.default.build(getShareExtensionEntitlements(appIdentifier));
}
exports.getShareExtensionEntitlementsContent = getShareExtensionEntitlementsContent;
//: [root]/ios/ShareExtension/ShareExtension-Info.plist
function getShareExtensionInfoFilePath(platformProjectRoot) {
    return node_path_1.default.join(platformProjectRoot, constants_1.shareExtensionName, constants_1.shareExtensionInfoFileName);
}
exports.getShareExtensionInfoFilePath = getShareExtensionInfoFilePath;
function getShareExtensionInfoContent(activationRules, appName) {
    return (plist_1.default
        .build({
        CFBundleName: "$(PRODUCT_NAME)",
        CFBundleDisplayName: `${appName} - Share Extension`,
        CFBundleIdentifier: "$(PRODUCT_BUNDLE_IDENTIFIER)",
        CFBundleDevelopmentRegion: "$(DEVELOPMENT_LANGUAGE)",
        CFBundleExecutable: "$(EXECUTABLE_NAME)",
        CFBundleInfoDictionaryVersion: "6.0",
        CFBundlePackageType: "$(PRODUCT_BUNDLE_PACKAGE_TYPE)",
        NSExtension: {
            NSExtensionAttributes: {
                NSExtensionActivationRule: activationRules || {
                    NSExtensionActivationSupportsWebURLWithMaxCount: 1,
                    NSExtensionActivationSupportsWebPageWithMaxCount: 1,
                },
            },
            NSExtensionMainStoryboard: "MainInterface",
            NSExtensionPointIdentifier: "com.apple.share-services",
        },
    })
        // handle custom NSExtensionActivationRule (ex: @count >= 1)
        .replaceAll("&gt;", ">")
        .replaceAll("&lt;", "<"));
}
exports.getShareExtensionInfoContent = getShareExtensionInfoContent;
//: [root]/ios/ShareExtension/PrivacyInfo.xcprivacy
function getPrivacyInfoFilePath(platformProjectRoot) {
    return node_path_1.default.join(platformProjectRoot, constants_1.shareExtensionName, "PrivacyInfo.xcprivacy");
}
exports.getPrivacyInfoFilePath = getPrivacyInfoFilePath;
function getPrivacyInfoContent() {
    return plist_1.default.build({
        NSPrivacyAccessedAPITypes: [
            {
                NSPrivacyAccessedAPIType: "NSPrivacyAccessedAPICategoryUserDefaults",
                NSPrivacyAccessedAPITypeReasons: ["CA92.1"],
            },
        ],
        NSPrivacyCollectedDataTypes: [],
        NSPrivacyTracking: false,
    });
}
exports.getPrivacyInfoContent = getPrivacyInfoContent;
//: [root]/ios/ShareExtension/MainInterface.storyboard
function getShareExtensionStoryboardFilePath(platformProjectRoot) {
    return node_path_1.default.join(platformProjectRoot, constants_1.shareExtensionName, constants_1.shareExtensionStoryBoardFileName);
}
exports.getShareExtensionStoryboardFilePath = getShareExtensionStoryboardFilePath;
function getShareExtensionStoryBoardContent() {
    return `<?xml version="1.0" encoding="UTF-8"?>
  <document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="13122.16" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="j1y-V4-xli">
      <dependencies>
          <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="13104.12"/>
          <capability name="Safe area layout guides" minToolsVersion="9.0"/>
          <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
      </dependencies>
      <scenes>
          <!--Share View Controller-->
          <scene sceneID="ceB-am-kn3">
              <objects>
                  <viewController id="j1y-V4-xli" customClass="ShareViewController" customModuleProvider="target" sceneMemberID="viewController">
                      <view key="view" opaque="NO" contentMode="scaleToFill" id="wbc-yd-nQP">
                          <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
                          <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                          <color key="backgroundColor" red="0.0" green="0.0" blue="0.0" alpha="0.0" colorSpace="custom" customColorSpace="sRGB"/>
                          <viewLayoutGuide key="safeArea" id="1Xd-am-t49"/>
                      </view>
                  </viewController>
                  <placeholder placeholderIdentifier="IBFirstResponder" id="CEy-Cv-SGf" userLabel="First Responder" sceneMemberID="firstResponder"/>
              </objects>
          </scene>
      </scenes>
  </document>
  `;
}
exports.getShareExtensionStoryBoardContent = getShareExtensionStoryBoardContent;
//: [root]/ios/ShareExtension/ShareViewController.swift
function getShareExtensionViewControllerPath(platformProjectRoot) {
    return node_path_1.default.join(platformProjectRoot, constants_1.shareExtensionName, constants_1.shareExtensionViewControllerFileName);
}
exports.getShareExtensionViewControllerPath = getShareExtensionViewControllerPath;
function getShareExtensionViewControllerContent(scheme, appIdentifier) {
    let updatedScheme = scheme;
    if (Array.isArray(scheme)) {
        console.debug(`[expo-share-intent] multiple scheme detected (${scheme.join(",")}), using:${updatedScheme}`);
        updatedScheme = scheme[0];
    }
    console.debug(`[expo-share-intent] add ios share extension (scheme:${updatedScheme} appIdentifier:${appIdentifier})`);
    if (!updatedScheme) {
        throw new Error("[expo-share-intent] missing custom URL scheme 'expo.scheme' in app.json ! (see https://docs.expo.dev/guides/linking/#linking-to-your-app)");
    }
    const content = node_fs_1.default.readFileSync(node_path_1.default.resolve(__dirname, "./ShareExtensionViewController.swift"), "utf8");
    return content
        .replaceAll("<SCHEME>", updatedScheme)
        .replaceAll("<APPIDENTIFIER>", appIdentifier);
}
exports.getShareExtensionViewControllerContent = getShareExtensionViewControllerContent;
