{"version":3,"file":"ExpoShareIntentModule.js","sourceRoot":"","sources":["../src/ExpoShareIntentModule.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,2BAA2B,EAC3B,YAAY,GAEb,MAAM,mBAAmB,CAAC;AAM3B,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAE/C,gGAAgG;AAChG,kEAAkE;AAClE,4EAA4E;AAC5E,MAAM,qBAAqB,GAAG,2BAA2B,CACvD,uBAAuB,CACxB,CAAC;AACF,eAAe,qBAAqB,CAAC;AAErC,MAAM,UAAU,cAAc,CAAC,GAAG,GAAG,EAAE;IACrC,OAAO,qBAAqB,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,GAAW;IAC1C,OAAO,qBAAqB,EAAE,gBAAgB,CAAC,GAAG,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAChF,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,GAAW;IACxC,OAAO,qBAAqB,EAAE,cAAc,CAAC,GAAG,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,OAAO,GAAG,qBAAqB;IACnC,CAAC,CAAC,IAAI,YAAY,CAAC,qBAAqB,CAAC;IACzC,CAAC,CAAC,IAAI,CAAC;AAET,MAAM,UAAU,gBAAgB,CAC9B,QAA6C;IAE7C,OAAO,OAAO,EAAE,WAAW,CAAqB,SAAS,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC;AAC/E,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,QAA6C;IAE7C,OAAO,OAAO,EAAE,WAAW,CAAqB,UAAU,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC;AAChF,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,QAA4C;IAE5C,OAAO,CACL,OAAO,EAAE,WAAW,CAAoB,eAAe,EAAE,QAAQ,CAAC,IAAI,IAAI,CAC3E,CAAC;AACJ,CAAC","sourcesContent":["import {\n  requireOptionalNativeModule,\n  EventEmitter,\n  Subscription,\n} from \"expo-modules-core\";\n\nimport {\n  ChangeEventPayload,\n  StateEventPayload,\n} from \"./ExpoShareIntentModule.types\";\nimport { getShareExtensionKey } from \"./utils\";\n\n// Import the native module. it will be resolved on native platforms to ExpoShareIntentModule.ts\n// It loads the native module object from the JSI or falls back to\n// the bridge module (from NativeModulesProxy) if the remote debugger is on.\nconst ExpoShareIntentModule = requireOptionalNativeModule(\n  \"ExpoShareIntentModule\",\n);\nexport default ExpoShareIntentModule;\n\nexport function getShareIntent(url = \"\"): string {\n  return ExpoShareIntentModule?.getShareIntent(url);\n}\n\nexport function clearShareIntent(key: string) {\n  return ExpoShareIntentModule?.clearShareIntent(key ?? getShareExtensionKey());\n}\n\nexport function hasShareIntent(key: string): boolean {\n  return ExpoShareIntentModule?.hasShareIntent(key ?? getShareExtensionKey());\n}\n\nconst emitter = ExpoShareIntentModule\n  ? new EventEmitter(ExpoShareIntentModule)\n  : null;\n\nexport function addErrorListener(\n  listener: (event: ChangeEventPayload) => void,\n): Subscription | null {\n  return emitter?.addListener<ChangeEventPayload>(\"onError\", listener) || null;\n}\n\nexport function addChangeListener(\n  listener: (event: ChangeEventPayload) => void,\n): Subscription | null {\n  return emitter?.addListener<ChangeEventPayload>(\"onChange\", listener) || null;\n}\n\nexport function addStateListener(\n  listener: (event: StateEventPayload) => void,\n): Subscription | null {\n  return (\n    emitter?.addListener<StateEventPayload>(\"onStateChange\", listener) || null\n  );\n}\n"]}