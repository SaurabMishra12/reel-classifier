{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAIzC,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,OAA4B,EAAE,EAAE;IACxD,IAAI,OAAO,EAAE,MAAM,KAAK,SAAS,EAAE,CAAC;QAClC,OAAO,EAAE,KAAK;YACZ,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QACxE,OAAO,OAAO,CAAC,MAAM,CAAC;IACxB,CAAC;IACD,IAAI,SAAS,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC;QACjC,IAAI,aAAa,GAAG,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC;QACjD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC;YAChD,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YACjC,OAAO,EAAE,KAAK;gBACZ,OAAO,CAAC,KAAK,CACX,sEAAsE,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,aAAa,EAAE,CACxI,CAAC;QACN,CAAC;aAAM,CAAC;YACN,OAAO,EAAE,KAAK;gBACZ,OAAO,CAAC,KAAK,CACX,0CAA0C,EAC1C,aAAa,CACd,CAAC;QACN,CAAC;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IACD,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC1C,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAC/D,OAAO,EAAE,KAAK;QACZ,OAAO,CAAC,KAAK,CACX,2CAA2C,EAC3C,WAAW,EACX,SAAS,CACV,CAAC;IACJ,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,OAA4B,EAAE,EAAE;IACnE,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAClC,OAAO,GAAG,MAAM,UAAU,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import Constants from \"expo-constants\";\nimport { createURL } from \"expo-linking\";\n\nimport { ShareIntentOptions } from \"./ExpoShareIntentModule.types\";\n\nexport const getScheme = (options?: ShareIntentOptions) => {\n  if (options?.scheme !== undefined) {\n    options?.debug &&\n      console.debug(\"expoShareIntent[scheme] from option:\", options.scheme);\n    return options.scheme;\n  }\n  if (Constants.expoConfig?.scheme) {\n    let updatedScheme = Constants.expoConfig?.scheme;\n    if (Array.isArray(Constants.expoConfig?.scheme)) {\n      updatedScheme = updatedScheme[0];\n      options?.debug &&\n        console.debug(\n          `expoShareIntent[scheme] from expoConfig: multiple scheme detected (${Constants.expoConfig?.scheme.join(\",\")}), using:${updatedScheme}`,\n        );\n    } else {\n      options?.debug &&\n        console.debug(\n          \"expoShareIntent[scheme] from expoConfig:\",\n          updatedScheme,\n        );\n    }\n    return updatedScheme;\n  }\n  const deepLinkUrl = createURL(\"dataUrl=\");\n  const extracted = deepLinkUrl.match(/^([^:]+)/gi)?.[0] || null;\n  options?.debug &&\n    console.debug(\n      \"expoShareIntent[scheme] from linking url:\",\n      deepLinkUrl,\n      extracted,\n    );\n  return extracted;\n};\n\nexport const getShareExtensionKey = (options?: ShareIntentOptions) => {\n  const scheme = getScheme(options);\n  return `${scheme}ShareKey`;\n};\n"]}